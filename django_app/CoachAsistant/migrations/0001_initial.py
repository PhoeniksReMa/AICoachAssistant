# Generated by Django 5.2.1 on 2025-06-03 19:22

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='OpenAIAssistant',
            fields=[
                ('id', models.CharField(help_text='Уникальный идентификатор ассистента (например, "asst_abc123")', max_length=100, primary_key=True, serialize=False)),
                ('object', models.CharField(default='assistant', help_text='Тип объекта (по умолчанию "assistant")', max_length=50)),
                ('created_at', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(help_text='Название ассистента (например, "Math Tutor")', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Описание ассистента (может быть пустым)', null=True)),
                ('model', models.CharField(help_text='Имя используемой языковой модели (например, "gpt-4o")', max_length=100)),
                ('instructions', models.TextField(help_text='Системные инструкции для ассистента')),
                ('tools', models.JSONField(blank=True, default=list, help_text='Список инструментов (например, [{ "type": "code_interpreter" }])')),
                ('tool_resources', models.JSONField(blank=True, default=dict, help_text='Ресурсы для инструментов в формате: {"file_search": {"vector_store_ids": ["vs_123"]}}')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Дополнительная структурированная информация (до 16 пар ключ-значение)')),
                ('top_p', models.FloatField(default=1.0, help_text='Параметр top_p')),
                ('temperature', models.FloatField(default=1.0, help_text='Параметр temperature')),
                ('response_format', models.CharField(default='auto', help_text='Формат ответа от ассистента', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='OpenAIThread',
            fields=[
                ('id', models.CharField(help_text='Уникальный идентификатор потока (например, "thread_abc123")', max_length=100, primary_key=True, serialize=False)),
                ('object', models.CharField(default='thread', help_text='Тип объекта (по умолчанию "thread")', max_length=50)),
                ('created_at', models.IntegerField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Дополнительная структурированная информация (до 16 пар ключ-значение)')),
            ],
        ),
        migrations.CreateModel(
            name='TelegramUser',
            fields=[
                ('chat_id', models.IntegerField(help_text='Уникальный идентификатор чата в Telegram', primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, help_text='Заголовок чата (может быть пустым для личного диалога)', max_length=255, null=True)),
                ('username', models.CharField(blank=True, help_text='Username пользователя (если есть)', max_length=255, null=True)),
                ('first_name', models.CharField(blank=True, help_text='Имя пользователя', max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, help_text='Фамилия пользователя', max_length=255, null=True)),
                ('paid', models.BooleanField(default=False, help_text='Статус оплаты (True, если оплачено)')),
                ('assistant', models.ForeignKey(help_text='Ассистент, связанный с этим Telegram-пользователем', on_delete=django.db.models.deletion.CASCADE, related_name='telegram_users', to='CoachAsistant.openaiassistant')),
                ('thread', models.ForeignKey(help_text='Тред, связанный с этим Telegram-пользователем', on_delete=django.db.models.deletion.CASCADE, related_name='telegram_users', to='CoachAsistant.openaithread')),
            ],
        ),
    ]
